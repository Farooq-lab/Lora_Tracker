/*
 * lora_comm.c
 *
 *  Created on: Mar 22, 2025
 *      Author: 91748
 */

// Includes
#include "globals.h"
#include "lora_comm.h"


int sendLoRaTxData(const char* payload , bool confirmed)
{
	// Initialize the Payload
	strncpy((char *)AppData.Buffer , payload , sizeof(AppData.Buffer)-1);
	AppData.BufferSize = strlen(payload);
	AppData.Port = 2 ;


	// Reset Acknowledgment Status
	loRaAckReceived  = 0 ;

	// Send the data with Confirmed ? UnConfirmed FLag
	if(LmHandlerSend(&AppData, confirmed ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG, true) == LORAMAC_HANDLER_SUCCESS)
	{
		APP_LOG(TS_ON , VLEVEL_L , "SEND REQUEST : %s \r\n" , payload);

		// wait for Acknowledgment (Only for Confirmed messages)
		if(confirmed)
		{
			uint32_t timeout = 5000 ;
			uint32_t startTime = HAL_GetTick();
			while(HAL_GetTick() - startTime < timeout)
			{
				if (loRaAckReceived != 0)  // Check if ACK is received or failed
				{
					break;
				}
			}

			if(loRaAckReceived == 1)
			{
				APP_LOG(TS_ON, VLEVEL_L, "LoRa TX Confirmed!\r\n");
				return LORA_SUCCESS;
			}
			else
			{
				APP_LOG(TS_ON, VLEVEL_L, "LoRa TX Failed - No ACK!\r\n");
				return LORA_FAIL;
			}
		}

		return LORA_SUCCESS ;

	}
	else
	{
		APP_LOG(TS_ON , VLEVEL_L , "LoRa Tx Failed\r\n");
		return LORA_FAIL ;
	}
}

void LoRaTxConfirmCallBack(bool ackRecieved)					// Sets the flag based on the acknowledgment received
{
	if(ackRecieved)
	{
		loRaAckReceived = 1 ;
	}
	else
	{
		loRaAckReceived = -1 ;									// Transmission Failure
	}
}

/*	SendEmergencyData()
 *  	Sends latest GPS Data over the LoRa thrice .
 * 		After each successful transmission (with acknowledgment) , the buzzer beeps
 *  */
void sendEmergencyData()
{
	if(!gpsDataReady)
	{
		printf("No Valid GPS data yet . PLEASE WAIT ...\r\n");
		return ;                                                         			// Do not send if no valid GPS fix..
	}
	for(int i = 0 ; i < 3 ; i++)
	{
		snprintf(payload , sizeof(payload) , "%.4f,%.4f" , lati , longi);
		loRaAckReceived = 0 ; 														// Reset Acknowledgment flag
		if(sendLoRaTxData(payload , true) == LORA_SUCCESS)
		{
			printf("Data Sent successfully . WAiting for Acknowledgment\r\n");
			// Wait for Acknowledgment for consider a 5 seconds buffer time
			uint32_t timeout = HAL_GetTick() + 5000 ;								// 5 sec buffer time
			while(loRaAckReceived == 0 && HAL_GetTick() < timeout);					// Wait for the Acknowledgment
			if(loRaAckReceived == 1)
			{
				printf("LoRa Acknowledgment Received Successfully !!! \r\n");
				// Turn On Buzzer only after Acknowledgment
				HAL_GPIO_WritePin(GPIOA , GPIO_PIN_10 , GPIO_PIN_SET);
				HAL_Delay(500);
				HAL_GPIO_WritePin(GPIOA , GPIO_PIN_10 , GPIO_PIN_RESET);
			}
			else
			{
				printf("LoRa Transmission FAILED \r\n");
			}
		}
		else
		{
			printf("LoRa Transmission Failed at initial send ...\r\n");
		}
	}
}

/* Function that continuously acquires GPS Data */
void updateGPSData()
{
	char* whole_single_packet_data = packet_checking_fun(uart_rx_buffer); 		// Extract GNRMC sentence --> PacketCheckingFunction
	printf("GPS DATA  :  %s\r\n",whole_single_packet_data);
	parse_nmea_sentence(whole_single_packet_data, latitude, longitude); 		// Parse latitude and longitude --> Filtration : Lat , Long
	printf("Parsed LATITUDE : %s , LONGITUDE : %s\r\n", latitude , longitude);	// Print latitude and longitude (for debugging)


	// Ensure Valid GPS data is stored
	if(latitude[0] != '\0' && longitude[0] != '\0' && atof(latitude) != 0.0 && atof(longitude) != 0.0)
	{
		lati = convertToDecimalDegrees(atof(latitude));							// Store it in variables to send as a payload later
		longi = convertToDecimalDegrees(atof(longitude));
		gpsDataReady = 1 ;  													// Set flag to indicate valid data
	}
	else
	{
		gpsDataReady = 0 ;
	}

	flag = 0 ;    																// Reset the flag so that the same nmea sentence is'nt used repeatedly
}
