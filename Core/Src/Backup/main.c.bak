/* USER CODE BEGIN Header */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "app_lorawan.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "string.h"
#include "stdbool.h"
#include "stdlib.h"
#include "lora_app.h"
#include "platform.h"
#include "Region.h" /* Needed for LORAWAN_DEFAULT_DATA_RATE */
#include "sys_app.h"
#include "stm32_seq.h"
#include "stm32_timer.h"
#include "utilities_def.h"
//#include "lora_app_version.h"
#include "lorawan_version.h"
#include "subghz_phy_version.h"
#include "lora_info.h"
#include "LmHandler.h"
#include "stm32_lpm.h"
#include "adc_if.h"
#include "sys_conf.h"
#include "CayenneLpp.h"
#include "sys_sensors.h"
#include "lis3dh_driver.h"   																			// Accelerometer(LIS3DHT) driver.h inclusion
#include "hdc3022_driver.h"																		 	   	// Humidity Sensor (HDC3022) driver.h inclusion
#include "lora_comm.h"
#include "gps_parser.h"
#include "globals.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

extern UART_HandleTypeDef huart1 ;                                                                      // UART for debugging
//extern LoRaWAN_HandleTypeDef hLoRaWAN ;																// LoRaWAN handler


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Emergency Button interrupt callback -- START ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)																							//
{																																		//
	buttonFlag = 1 ;																													//
}																																		//
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Emergency button interrupt callback -- END   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UART PRINTF FUNCTION START ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#define GETCHAR_PROTOTYPE int __io_getchar(void)

PUTCHAR_PROTOTYPE {
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

GETCHAR_PROTOTYPE {
    uint8_t ch = 0;
    __HAL_UART_CLEAR_OREFLAG(&huart1);
    HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  UART PRINTF FUNCTION END  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  setvbuf(stdin, NULL, _IONBF,0);							// UART PRINTF FUNCTION
  //char payload[512];										// Payload
  //float x_accel , y_accel , z_accel ;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_LoRaWAN_Init();
  MX_I2C2_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);								   // PMIC - PA0
  HAL_UART_Receive_IT(&huart2, (uint8_t*) temp_buffer, TEMP_BUFFER_SIZE);			   // Start the interrupt  ----> INTERRUPT ENABLE
  //who_am_i_read();               													   // Enable accelerometer functions
  //lis3dh_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */

	MX_LoRaWAN_Process();                                                   		   // process LoRaWAN continously

	// Continuously update GPS data if a complete sentence is received
	if(flag == 1)
	{
		updateGPSData();                                                           		// Update Global Variables Lati and Longi , and set the flag --> gpsDataReady
	}
//---------------------------------------- EMERGENCY BUTTON FUNCTIONALITY  (START)-----------------------------------------------------------------
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);										    // LED Toggle Pin

	if(buttonFlag)
	{
		printf("EMERGENCY Button Pressed !!\r\n\n");
		// send the Emergency data only if the gps data is ready
		if(gpsDataReady)
		{
			sendEmergencyData();
		}
		else
		{
			printf("Valid Gps Data not available , Please wait for a fix \r\n");
		}

		buttonFlag = 0 ; 																		// Reset button flag post processing
	}

//---------------------------------------- EMERGENCY BUTTON FUNCTIONALITY  (END)  -----------------------------------------------------------------



// ------------------------------------ ABNORMAL ACTIVITY SEQUENCE OF STEPS (START)----ACCELEROMETER --------------------------------------------------

//		// Read Accelerometer Data  - Store the values in an instance by calling the function
//		AccelValue_t accValues = readAccelerationData_XYZ();
//		// Abnormal detection function call
//		int abnormal = detect_motion(accValues.x_accel,accValues.y_accel,accValues.z_accel);
//		if (abnormal)
//		{
//			if (flag == 1)
//			{
//				printf("*********** ABNORMAL ACIVITY DETECTED & FLAG BECOMES --> 1 ***********\r\n");
//				// Check if data is ready for processing
//				char* whole_single_packet_data = packet_checking_fun(uart_rx_buffer); 		// Extract GNRMC sentence --> PacketChecking
//				printf("GPS DATA  :  %s\r\n",whole_single_packet_data);
//				parse_nmea_sentence(whole_single_packet_data, latitude, longitude); 		// Parse latitude and longitude --> Filtration : Lat , Long
//
//				// Print latitude and longitude (for debugging)
//				printf("LATITUDE : %s\r\n", latitude);
//				printf("LONGITUDE : %s\r\n", longitude);
//				lati = convertToDecimalDegrees(atof(latitude));
//				longi = convertToDecimalDegrees(atof(longitude));
//
//				snprintf(payload, sizeof(payload), "%.4f,%.4f", lati, longi);
//				SendLoRaTxData(payload);
//				flag = 0;																	 // Reset flag
//				HAL_Delay(1000);
//				//readAndPrintAccelerationData();               								 // Enable accelerometer functions
//				//HAL_Delay(2000);
//			}
//		}
// ------------------------------------ ABNORMAL ACTIVITY SEQUENCE OF STEPS (END)-----------ACCELEROMETER---------------------------------------


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
